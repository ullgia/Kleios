@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using System.Threading.Tasks

<MudDialog>
    <DialogContent>
        <MudPaper Elevation="0" Class="error-container pa-4">
            <div class="error-header">
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Class="mr-2" />
                Si è verificato un errore nell'applicazione
            </div>
            <div class="error-message">
                <MudText>@ErrorMessage</MudText>
                @if (ShowDetails)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText>Dettagli tecnici</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudText Style="font-family: monospace; white-space: pre-wrap;">@DetailedErrorMessage</MudText>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </div>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" OnClick="RefreshPage">Aggiorna pagina</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Home" OnClick="GoToHome">Torna alla Home</MudButton>
        @if (!ShowDetails)
        {
            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="ShowErrorDetailsClicked">Mostra dettagli</MudButton>
        }
    </DialogActions>
</MudDialog>

<style>
    .error-container {
        background-color: #ffebee;
        border: 1px solid #ef5350;
        border-radius: 4px;
    }

    .error-header {
        color: #c62828;
        font-weight: bold;
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .error-message {
        margin-bottom: 15px;
    }
</style>

@code {
    [Parameter] public string ErrorMessage { get; set; } = "Si è verificato un errore imprevisto durante l'elaborazione della richiesta.";
    [Parameter] public string DetailedErrorMessage { get; set; } = "";
    [Parameter] public EventCallback OnRefreshRequested { get; set; }
    [Parameter] public EventCallback OnHomeRequested { get; set; }
    
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }
    
    private bool ShowDetails { get; set; } = false;

    private async Task RefreshPage()
    {
        if (OnRefreshRequested.HasDelegate)
        {
            await OnRefreshRequested.InvokeAsync();
        }
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private async Task GoToHome()
    {
        if (OnHomeRequested.HasDelegate)
        {
            await OnHomeRequested.InvokeAsync();
        }
        MudDialog?.Close(DialogResult.Ok(false));
    }

    private void ShowErrorDetailsClicked()
    {
        ShowDetails = true;
    }
}