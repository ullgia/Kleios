@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<style>
    .not-authorized-style{
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #3a0647 0%, rgb(5, 39, 103) 100%);
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        text-align: center;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        margin: 0 auto;

    }

    .app-bar{
        background: linear-gradient(135deg, #3a0647 0%, rgb(5, 39, 103) 100%);
        color: white;
        font-size: 1.5rem;

    }

    .nav-bar{
        background: linear-gradient(135deg, #3a0647 0%, rgb(5, 39, 103) 100%);
        color: white;
    }

    .mud-nav-link-text{
        color:white;
        padding-top:10px;
    }

    .error-container {
        padding: 20px;
        margin: 20px;
        background-color: #ffebee;
        border: 1px solid #ef5350;
        border-radius: 4px;
        max-width: 800px;
        margin: 0 auto;
    }

    .error-header {
        color: #c62828;
        font-weight: bold;
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .error-message {
        margin-bottom: 15px;
    }

    .error-actions {
        display: flex;
        gap: 10px;
    }
</style>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
        <MudLayout>
            <AuthorizeView>
                <NotAuthorized>
                    <div class="not-authorized-style">
                        <MudPaper Elevation="25" Square="false" Class="pa-8" Width="500px" MaxWidth="500px">
                            @Body
                        </MudPaper>
                    </div>

                </NotAuthorized>
                <Authorized>
                    <MudAppBar Elevation="1" Class="app-bar">
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                        <MudText Typo="Typo.h6" Class="ml-3">Kleios</MudText>
                        <MudSpacer />

                        <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" direction="Direction.Bottom" offsetY="true">
                            <MudText Typo="Typo.body1" Class="px-4 py-2">@_username</MudText>
                            <MudDivider />
                        </MudMenu>
                    </MudAppBar>

                    <MudDrawer @bind-Open="_drawerOpen" Class="nav-bar" ClipMode="DrawerClipMode.Always" Elevation="2">
                        <NavMenu />
                    </MudDrawer>

                    <MudMainContent>
                        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4 pt-4">
                            @Body
                        </MudContainer>
                    </MudMainContent>
                </Authorized>
            </AuthorizeView>
        </MudLayout>
    </ChildContent>
</ErrorBoundary>

@code {
    private bool _drawerOpen = true;
    private string _username = "";
    private ErrorBoundary? _errorBoundary;

    protected override async Task OnInitializedAsync()
    {
        var authentication = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    
        var user = authentication.User;
        _username = user.Identity?.Name ?? string.Empty;
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task HandleError(Exception exception)
    {
        var parameters = new DialogParameters
        {
            ["ErrorMessage"] = "Si è verificato un errore imprevisto durante l'elaborazione della richiesta.",
            ["DetailedErrorMessage"] = $"Errore: {exception.Message}\n\nStack trace: {exception.StackTrace}",
            ["OnRefreshRequested"] = EventCallback.Factory.Create(this, RefreshPage),
            ["OnHomeRequested"] = EventCallback.Factory.Create(this, GoToHome)
        };

        var options = new DialogOptions
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        // Utilizziamo il componente nella stessa directory
        await DialogService.ShowAsync<ErrorHandler>("Errore", parameters, options);
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}
