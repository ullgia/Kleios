
@implements IDisposable

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    private string _currentUri = string.Empty;
    
    protected override void OnInitialized()
    {
        // Aggiungiamo un listener agli eventi di navigazione di Blazor
        NavigationManager.LocationChanged += OnLocationChanged;
        _currentUri = NavigationManager.Uri;
        
        // Verifica l'accesso all'URL iniziale
        CheckAccess();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // All'avvio dell'applicazione, verifica se l'utente sta tentando
            // di accedere a una rotta protetta e non è autenticato
            await CheckAuthenticationForCurrentPath();
        }
    }
    
    private async Task CheckAuthenticationForCurrentPath()
    {
        string path = NavigationManager.Uri;
        
        bool isAuthenticated = await AuthService.IsAuthenticatedAsync();
        bool canNavigate = await AuthService.CanNavigateToAsync(path);
        
        if (!isAuthenticated && !canNavigate)
        {
            // Se l'utente non è autenticato e sta tentando di accedere a una rotta protetta,
            // reindirizza alla pagina di login
            NavigationManager.NavigateTo("/Account/login", true);
        }
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUri = e.Location;
        CheckAccess();
    }
    
    private void CheckAccess()
    {
        // Le verifiche di autenticazione verranno eseguite in modo asincrono
        // Questo viene utilizzato per aggiornare l'interfaccia durante i cambi di rotta
        InvokeAsync(async () => await CheckAuthenticationForCurrentPath());
    }
    
    void IDisposable.Dispose()
    {
        // Rimuoviamo l'event handler quando il componente viene distrutto
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}