@using Kleios.Shared.Models
@inject ISystemAdministrationService SystemService

<MudField Label="@Label" Variant="Variant.Outlined">
    <MudTextField @bind-Value="@Password"
                  InputType="@PasswordInputType"
                  Adornment="Adornment.End"
                  AdornmentIcon="@PasswordIcon"
                  OnAdornmentClick="TogglePasswordVisibility"
                  Immediate="true"
                  OnDebounceIntervalElapsed="ValidatePasswordDebounced"
                  DebounceInterval="500"
                  Label="@Label"
                  Variant="Variant.Outlined"
                  Required="@Required"
                  Error="@(!ValidationResult?.IsValid ?? false)"
                  ErrorText="@GetErrorText()" />
    
    @if (ShowStrengthMeter && ValidationResult != null)
    {
        <MudProgressLinear Color="@GetStrengthColor()" 
                          Value="@ValidationResult.StrengthScore" 
                          Size="Size.Small" 
                          Class="mt-2" />
        <MudText Typo="Typo.caption" Color="@GetStrengthColor()" Class="mt-1">
            Forza: @ValidationResult.StrengthLevel (@ValidationResult.StrengthScore/100)
        </MudText>
    }
    
    @if (ValidationResult != null && ValidationResult.Errors.Any())
    {
        <MudList T="string" Dense="true" Class="mt-2">
            @foreach (var error in ValidationResult.Errors)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" /> @error
                    </MudText>
                </MudListItem>
            }
        </MudList>
    }
</MudField>

@code {
    [Parameter]
    public string Label { get; set; } = "Password";
    
    [Parameter]
    public string Password { get; set; } = string.Empty;
    
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }
    
    [Parameter]
    public bool Required { get; set; } = true;
    
    [Parameter]
    public bool ShowStrengthMeter { get; set; } = true;
    
    [Parameter]
    public EventCallback<PasswordValidationResult> OnValidation { get; set; }
    
    private PasswordValidationResult? ValidationResult { get; set; }
    private bool _passwordVisible = false;
    private InputType PasswordInputType => _passwordVisible ? InputType.Text : InputType.Password;
    private string PasswordIcon => _passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        _passwordVisible = !_passwordVisible;
    }

    private async Task ValidatePasswordDebounced()
    {
        if (string.IsNullOrEmpty(Password))
        {
            ValidationResult = null;
            return;
        }

        try
        {
            var result = await SystemService.ValidatePasswordAsync(Password);
            if (result.IsSuccess)
            {
                ValidationResult = result.Value;
                await OnValidation.InvokeAsync(ValidationResult);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore durante la validazione della password: {ex.Message}");
        }

        await PasswordChanged.InvokeAsync(Password);
    }

    private Color GetStrengthColor()
    {
        if (ValidationResult == null) return Color.Default;
        
        if (ValidationResult.StrengthScore < 40)
            return Color.Error;
        if (ValidationResult.StrengthScore < 60)
            return Color.Warning;
        if (ValidationResult.StrengthScore < 80)
            return Color.Info;
        return Color.Success;
    }

    private string GetErrorText()
    {
        if (ValidationResult == null || ValidationResult.IsValid)
            return string.Empty;
        
        return string.Join(", ", ValidationResult.Errors);
    }
}
