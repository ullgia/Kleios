@page "/System/ActiveSessions"
@using Kleios.Shared.Models
@inject ISystemAdministrationService SystemService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Sessioni Attive</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
    <!-- Statistiche -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Devices" Size="Size.Large" Color="Color.Primary" Class="mr-3" />
                        <div>
                            <MudText Typo="Typo.h6">@(_statistics?.TotalActiveSessions ?? 0)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Sessioni Attive</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Computer" Size="Size.Large" Color="Color.Info" Class="mr-3" />
                        <div>
                            <MudText Typo="Typo.h6">@(_statistics?.DesktopSessions ?? 0)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Desktop</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.PhoneAndroid" Size="Size.Large" Color="Color.Success" Class="mr-3" />
                        <div>
                            <MudText Typo="Typo.h6">@(_statistics?.MobileSessions ?? 0)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Mobile</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Tablet" Size="Size.Large" Color="Color.Warning" Class="mr-3" />
                        <div>
                            <MudText Typo="Typo.h6">@(_statistics?.TabletSessions ?? 0)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Tablet</MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Lista sessioni -->
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Le Mie Sessioni Attive</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled"
                          Color="Color.Error"
                          OnClick="TerminateAllOtherSessions"
                          StartIcon="@Icons.Material.Filled.Block">
                    Termina Tutte le Altre
                </MudButton>
                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                              Color="Color.Primary"
                              OnClick="LoadSessions" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (_loading)
            {
                <MudProgressLinear Indeterminate="true" />
            }
            else if (!_sessions.Any())
            {
                <MudAlert Severity="Severity.Info">Nessuna sessione attiva</MudAlert>
            }
            else
            {
                <MudList T="string">
                    @foreach (var session in _sessions)
                    {
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between align-center" style="width: 100%">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetDeviceIcon(session.DeviceType)"
                                            Color="@GetDeviceColor(session.DeviceType)"
                                            Size="Size.Large"
                                            Class="mr-3" />
                                    <div>
                                        <MudText Typo="Typo.subtitle1">
                                            @session.Browser on @session.OperatingSystem
                                            @if (session.IsCurrentSession)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Success">Corrente</MudChip>
                                            }
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                            @session.Location | @session.IpAddress
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            Attiva: @session.LastActivity.ToString("dd/MM/yyyy HH:mm") |
                                            Scade: @session.ExpiresAt.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    </div>
                                </div>
                                @if (!session.IsCurrentSession)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                  Color="Color.Error"
                                                  OnClick="() => TerminateSession(session.Id)"
                                                  Title="Termina sessione" />
                                }
                            </div>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            }
        </MudCardContent>
    </MudCard>

    @if (_statistics?.LastLoginTime != null)
    {
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-2">Ultimo Accesso</MudText>
                <MudText Typo="Typo.body2">
                    <strong>Data/Ora:</strong> @_statistics.LastLoginTime?.ToString("dd/MM/yyyy HH:mm:ss")
                </MudText>
                <MudText Typo="Typo.body2">
                    <strong>IP:</strong> @_statistics.LastLoginIp
                </MudText>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private List<UserSessionDto> _sessions = new();
    private SessionStatisticsDto? _statistics;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
        await LoadStatistics();
    }

    private async Task LoadSessions()
    {
        try
        {
            _loading = true;
            var result = await SystemService.GetMySessionsAsync();
            
            if (result.IsSuccess)
            {
                _sessions = result.Value.ToList();
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante il caricamento delle sessioni", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            var result = await SystemService.GetMySessionStatisticsAsync();
            
            if (result.IsSuccess)
            {
                _statistics = result.Value;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore durante il caricamento delle statistiche: {ex.Message}");
        }
    }

    private async Task TerminateSession(Guid sessionId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Conferma",
            "Sei sicuro di voler terminare questa sessione?",
            yesText: "Sì", cancelText: "Annulla");

        if (confirmed != true) return;

        try
        {
            var result = await SystemService.TerminateSessionAsync(sessionId);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Sessione terminata con successo", Severity.Success);
                await LoadSessions();
                await LoadStatistics();
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante la terminazione della sessione", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }

    private async Task TerminateAllOtherSessions()
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Conferma",
            "Sei sicuro di voler terminare tutte le altre sessioni? Rimarrà attiva solo quella corrente.",
            yesText: "Sì", cancelText: "Annulla");

        if (confirmed != true) return;

        try
        {
            var result = await SystemService.TerminateAllOtherSessionsAsync();
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Tutte le altre sessioni sono state terminate", Severity.Success);
                await LoadSessions();
                await LoadStatistics();
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante la terminazione delle sessioni", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }

    private string GetDeviceIcon(string deviceType)
    {
        return deviceType switch
        {
            "Mobile" => Icons.Material.Filled.PhoneAndroid,
            "Tablet" => Icons.Material.Filled.Tablet,
            "Desktop" => Icons.Material.Filled.Computer,
            _ => Icons.Material.Filled.Devices
        };
    }

    private Color GetDeviceColor(string deviceType)
    {
        return deviceType switch
        {
            "Mobile" => Color.Success,
            "Tablet" => Color.Warning,
            "Desktop" => Color.Info,
            _ => Color.Default
        };
    }
}
