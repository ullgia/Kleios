@page "/System/PasswordPolicy"
@using Kleios.Shared.Authorization
@using Kleios.Shared.Models
@attribute [Authorize(Policy = AppPermissions.Settings.Manage)]
@inject ISystemAdministrationService SystemService
@inject ISnackbar Snackbar

<PageTitle>Password Policy</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Gestione Password Policy</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (_loading)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (_policy != null)
            {
                <MudForm @ref="_form">
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.MinimumLength"
                                           Label="Lunghezza Minima"
                                           Min="4"
                                           Max="32"
                                           Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.MaximumLength"
                                           Label="Lunghezza Massima"
                                           Min="8"
                                           Max="256"
                                           Required="true" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Value="_policy.RequireUppercase"
                                     Label="Richiedi Maiuscole"
                                     Color="Color.Primary" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Value="_policy.RequireLowercase"
                                     Label="Richiedi Minuscole"
                                     Color="Color.Primary" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Value="_policy.RequireDigit"
                                     Label="Richiedi Numeri"
                                     Color="Color.Primary" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Value="_policy.RequireSpecialCharacter"
                                     Label="Richiedi Caratteri Speciali"
                                     Color="Color.Primary" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.PasswordHistorySize"
                                           Label="Dimensione Storico Password"
                                           Hint="Numero di password precedenti da ricordare"
                                           Min="0"
                                           Max="20" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.PasswordExpirationDays"
                                           Label="Giorni Scadenza Password"
                                           Hint="0 = nessuna scadenza"
                                           Min="0"
                                           Max="365" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.MaxFailedAccessAttempts"
                                           Label="Tentativi Falliti Massimi"
                                           Min="3"
                                           Max="10" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="_policy.LockoutDurationMinutes"
                                           Label="Durata Blocco (minuti)"
                                           Min="5"
                                           Max="1440" />
                        </MudItem>
                    </MudGrid>
                </MudForm>
                
                <!-- Password scadute -->
                <MudDivider Class="my-6" />
                <MudText Typo="Typo.h6" Class="mb-4">Utenti con Password Scadute o in Scadenza</MudText>
                
                @if (_expiredPasswords == null || !_expiredPasswords.Any())
                {
                    <MudAlert Severity="Severity.Success">Nessun utente con password scaduta</MudAlert>
                }
                else
                {
                    <MudTable Items="@_expiredPasswords" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Utente ID</MudTh>
                            <MudTh>Ultimo Cambio</MudTh>
                            <MudTh>Giorni alla Scadenza</MudTh>
                            <MudTh>Stato</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Utente">@context.UserId</MudTd>
                            <MudTd DataLabel="Ultimo Cambio">
                                @(context.LastPasswordChangeDate?.ToString("dd/MM/yyyy") ?? "Mai")
                            </MudTd>
                            <MudTd DataLabel="Giorni">
                                <MudChip T="string" Size="Size.Small"
                                        Color="@(context.DaysUntilExpiration <= 0 ? Color.Error : context.DaysUntilExpiration <= 7 ? Color.Warning : Color.Info)">
                                    @context.DaysUntilExpiration giorni
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Stato">
                                @if (context.IsExpired)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Error">Scaduta</MudChip>
                                }
                                else if (context.MustChangePassword)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning">Cambio Obbligatorio</MudChip>
                                }
                                else if (context.IsLockedOut)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Error">Bloccato</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success">Attiva</MudChip>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      OnClick="SavePolicy"
                      Disabled="_loading">
                Salva Policy
            </MudButton>
            <MudButton Variant="Variant.Text"
                      OnClick="LoadPolicy"
                      Disabled="_loading">
                Annulla
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Text"
                      Color="Color.Info"
                      OnClick="LoadExpiredPasswords"
                      StartIcon="@Icons.Material.Filled.Refresh">
                Aggiorna Lista
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private MudForm? _form;
    private PasswordPolicyDto? _policy;
    private List<UserPasswordStatusDto>? _expiredPasswords;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPolicy();
        await LoadExpiredPasswords();
    }

    private async Task LoadPolicy()
    {
        try
        {
            _loading = true;
            var result = await SystemService.GetPasswordPolicyAsync();
            
            if (result.IsSuccess)
            {
                _policy = result.Value;
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante il caricamento della policy", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SavePolicy()
    {
        if (_form == null || _policy == null) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            _loading = true;
            var result = await SystemService.UpdatePasswordPolicyAsync(_policy);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Password policy aggiornata con successo", Severity.Success);
                _policy = result.Value;
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante l'aggiornamento", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadExpiredPasswords()
    {
        try
        {
            var result = await SystemService.GetExpiredPasswordsAsync();
            
            if (result.IsSuccess)
            {
                _expiredPasswords = result.Value.ToList();
            }
            else
            {
                Snackbar.Add(result.Message ?? "Errore durante il caricamento delle password scadute", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }
}
