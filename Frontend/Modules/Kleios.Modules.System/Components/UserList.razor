@page "/System/Users"
@using Kleios.Shared.Authorization
@using Kleios.Shared.Models
@using Kleios.Modules.System.Components.Users
@attribute [Authorize(Policy = AppPermissions.Users.View)]
@inject ISystemAdministrationService SystemService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestione Utenti</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Gestione Utenti</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <AuthorizeView Policy="@AppPermissions.Users.Manage">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="OpenCreateDialog">
                        Nuovo Utente
                    </MudButton>
                </AuthorizeView>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (_loading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else if (_error != null)
            {
                <MudAlert Severity="Severity.Error" Class="my-4">@_error</MudAlert>
            }
            else
            {
                <MudTable Items="@_users" 
                          Hover="true" 
                          Breakpoint="Breakpoint.Sm" 
                          Loading="@_loading"
                          LoadingProgressColor="Color.Info"
                          Dense="true">
                    <HeaderContent>
                        <MudTh>Username</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Nome Completo</MudTh>
                        <MudTh>Ruoli</MudTh>
                        <MudTh>Data Creazione</MudTh>
                        <MudTh>Stato</MudTh>
                        <MudTh Style="text-align: right">Azioni</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Username">
                            <MudText Typo="Typo.body2">
                                <strong>@context.Username</strong>
                                @if (context.IsMasterUser)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Error" Class="ml-2">Master</MudChip>
                                }
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Nome Completo">@GetFullName(context)</MudTd>
                        <MudTd DataLabel="Ruoli">
                            @foreach (var role in context.Roles)
                            {
                                <MudChip T="string" Color="GetRoleColor(role)" Size="Size.Small" Class="mr-1">@role</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Data Creazione">@context.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
                        <MudTd DataLabel="Stato">
                            <MudChip T="string" 
                                     Color="@(context.EmailConfirmed ? Color.Success : Color.Warning)" 
                                     Size="Size.Small">
                                @(context.EmailConfirmed ? "Confermato" : "In attesa")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Azioni" Style="text-align: right">
                            <AuthorizeView Policy="@AppPermissions.Users.Manage" Context="auth">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   OnClick="@(() => OpenEditDialog(context))"
                                                   Title="Modifica" />
                                    @if (!context.IsMasterUser)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       OnClick="@(() => OpenDeleteDialog(context))"
                                                       Title="Elimina" />
                                    }
                                </MudButtonGroup>
                            </AuthorizeView>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<UserDetailResponse> _users = new();
    private List<string> _availableRoles = new();
    private bool _loading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadUsers();
    }

    private async Task LoadRoles()
    {
        try
        {
            var result = await SystemService.GetRolesAsync();
            if (result.IsSuccess)
            {
                _availableRoles = result.Value.Select(r => r.Name).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore caricamento ruoli: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            _loading = true;
            _error = null;

            var filter = new UserFilter
            {
                Page = 1,
                PageSize = 100
            };
            
            var result = await SystemService.GetUsersAsync(filter);

            if (result.IsSuccess)
            {
                _users = result.Value.Select(u => new UserDetailResponse
                {
                    Id = u.Id,
                    Username = u.Username,
                    Email = u.Email,
                    FirstName = u.FirstName,
                    LastName = u.LastName,
                    Roles = u.Roles,
                    CreatedAt = u.CreatedAt,
                    UpdatedAt = u.UpdatedAt,
                    EmailConfirmed = u.UpdatedAt != null,
                    IsMasterUser = u.Username == "master"
                }).ToList();
            }
            else
            {
                _error = result.Message ?? "Errore durante il caricamento degli utenti";
                Snackbar.Add(_error, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Si Ã¨ verificato un errore: {ex.Message}";
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(CreateUserDialog.AvailableRoles), _availableRoles }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<CreateUserDialog>("Crea Nuovo Utente", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is CreateUserRequest createRequest)
        {
            await CreateUser(createRequest);
        }
    }

    private async Task CreateUser(CreateUserRequest request)
    {
        try
        {
            var result = await SystemService.CreateUserAsync(request);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Utente creato con successo!", Severity.Success);
                await LoadUsers();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante la creazione: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEditDialog(UserDetailResponse user)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditUserDialog.User), user },
            { nameof(EditUserDialog.AvailableRoles), _availableRoles }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<EditUserDialog>($"Modifica Utente: {user.Username}", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is UpdateUserRequest updateRequest)
        {
            await UpdateUser(user.Id, updateRequest);
        }
    }

    private async Task UpdateUser(Guid userId, UpdateUserRequest request)
    {
        try
        {
            var result = await SystemService.UpdateUserAsync(userId, request);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Utente aggiornato con successo!", Severity.Success);
                await LoadUsers();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante l'aggiornamento: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDeleteDialog(UserDetailResponse user)
    {
        var parameters = new DialogParameters
        {
            { nameof(DeleteUserDialog.User), user }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small
        };
        
        var dialog = await DialogService.ShowAsync<DeleteUserDialog>("Conferma Eliminazione", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await DeleteUser(user.Id);
        }
    }

    private async Task DeleteUser(Guid userId)
    {
        try
        {
            var result = await SystemService.DeleteUserAsync(userId);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Utente eliminato con successo!", Severity.Success);
                await LoadUsers();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante l'eliminazione: {ex.Message}", Severity.Error);
        }
    }

    private string GetFullName(UserDetailResponse user)
    {
        if (!string.IsNullOrEmpty(user.FirstName) || !string.IsNullOrEmpty(user.LastName))
        {
            return $"{user.FirstName} {user.LastName}".Trim();
        }
        return "-";
    }

    private Color GetRoleColor(string role)
    {
        return role switch
        {
            "Admin" => Color.Error,
            "Manager" => Color.Warning,
            "User" => Color.Info,
            _ => Color.Default
        };
    }
}
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetRoleColor(string role)
    {
        return role switch
        {
            "Admin" => Color.Error,
            "Manager" => Color.Warning,
            "Utente" => Color.Info,
            _ => Color.Default
        };
    }
}