@page "/System/Roles"
@using Kleios.Shared.Authorization
@using Kleios.Shared.Models
@using Kleios.Modules.System.Components.Roles
@attribute [Authorize(Policy = AppPermissions.Roles.View)]
@inject ISystemAdministrationService SystemService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestione Ruoli</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Gestione Ruoli</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <AuthorizeView Policy="@AppPermissions.Roles.Manage">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="OpenCreateDialog">
                        Nuovo Ruolo
                    </MudButton>
                </AuthorizeView>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (_loading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else if (_error != null)
            {
                <MudAlert Severity="Severity.Error" Class="my-4">@_error</MudAlert>
            }
            else
            {
                <MudTable Items="@_roles" 
                          Hover="true" 
                          Breakpoint="Breakpoint.Sm" 
                          Loading="@_loading"
                          LoadingProgressColor="Color.Info"
                          Dense="true">
                    <HeaderContent>
                        <MudTh>Nome</MudTh>
                        <MudTh>Descrizione</MudTh>
                        <MudTh>Permessi</MudTh>
                        <MudTh>Data Creazione</MudTh>
                        <MudTh>Tipo</MudTh>
                        <MudTh Style="text-align: right">Azioni</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nome">
                            <MudText Typo="Typo.body2">
                                <strong>@context.Name</strong>
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Descrizione">
                            <MudText Typo="Typo.body2">@context.Description</MudText>
                        </MudTd>
                        <MudTd DataLabel="Permessi">
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                @context.Permissions.Count permessi
                            </MudChip>
                            @if (context.Permissions.Any())
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                               Size="Size.Small"
                                               OnClick="@(() => ShowPermissions(context))"
                                               Title="Visualizza permessi" />
                            }
                        </MudTd>
                        <MudTd DataLabel="Data Creazione">@context.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
                        <MudTd DataLabel="Tipo">
                            <MudChip T="string" 
                                     Color="@(context.IsSystemRole ? Color.Warning : Color.Default)" 
                                     Size="Size.Small">
                                @(context.IsSystemRole ? "Sistema" : "Personalizzato")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Azioni" Style="text-align: right">
                            <AuthorizeView Policy="@AppPermissions.Roles.Manage" Context="auth">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   OnClick="@(() => OpenEditDialog(context))"
                                                   Title="Modifica" />
                                    @if (!context.IsSystemRole)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       OnClick="@(() => OpenDeleteDialog(context))"
                                                       Title="Elimina" />
                                    }
                                </MudButtonGroup>
                            </AuthorizeView>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<RoleDto> _roles = new();
    private List<PermissionDto> _allPermissions = new();
    private bool _loading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadPermissions();
        await LoadRoles();
    }

    private async Task LoadPermissions()
    {
        try
        {
            var result = await SystemService.GetPermissionsAsync();
            if (result.IsSuccess)
            {
                _allPermissions = result.Value.ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore caricamento permessi: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            _loading = true;
            _error = null;

            var result = await SystemService.GetRolesAsync();

            if (result.IsSuccess)
            {
                _roles = result.Value.ToList();
            }
            else
            {
                _error = result.Message ?? "Errore durante il caricamento dei ruoli";
                Snackbar.Add(_error, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _error = $"Si Ã¨ verificato un errore: {ex.Message}";
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(CreateRoleDialog.AllPermissions), _allPermissions }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<CreateRoleDialog>("Crea Nuovo Ruolo", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is CreateRoleRequest createRequest)
        {
            await CreateRole(createRequest);
        }
    }

    private async Task CreateRole(CreateRoleRequest request)
    {
        try
        {
            var result = await SystemService.CreateRoleAsync(request);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Ruolo creato con successo!", Severity.Success);
                await LoadRoles();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante la creazione: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEditDialog(RoleDto role)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditRoleDialog.Role), role },
            { nameof(EditRoleDialog.AllPermissions), _allPermissions }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<EditRoleDialog>($"Modifica Ruolo: {role.Name}", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is UpdateRoleRequest updateRequest)
        {
            await UpdateRole(role.Id, updateRequest);
        }
    }

    private async Task UpdateRole(Guid roleId, UpdateRoleRequest request)
    {
        try
        {
            var result = await SystemService.UpdateRoleAsync(roleId, request);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Ruolo aggiornato con successo!", Severity.Success);
                await LoadRoles();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante l'aggiornamento: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDeleteDialog(RoleDto role)
    {
        var parameters = new DialogParameters
        {
            { nameof(DeleteRoleDialog.Role), role }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small
        };
        
        var dialog = await DialogService.ShowAsync<DeleteRoleDialog>("Conferma Eliminazione", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await DeleteRole(role.Id);
        }
    }

    private async Task DeleteRole(Guid roleId)
    {
        try
        {
            var result = await SystemService.DeleteRoleAsync(roleId);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Ruolo eliminato con successo!", Severity.Success);
                await LoadRoles();
            }
            else
            {
                Snackbar.Add($"Errore: {result.Message ?? "Errore sconosciuto"}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante l'eliminazione: {ex.Message}", Severity.Error);
        }
    }

    private void ShowPermissions(RoleDto role)
    {
        var parameters = new DialogParameters
        {
            { nameof(ViewPermissionsDialog.Role), role }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium
        };
        
        DialogService.ShowAsync<ViewPermissionsDialog>($"Permessi del Ruolo: {role.Name}", parameters, options);
    }
}
